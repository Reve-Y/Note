### C++虚函数与JAVA中抽象函数比较    
　　1：java中没有虚函数的概念，但是有抽象函数的概念，用abstract关键字表示，java中抽象函数必须在抽象类中，而且抽象 函数不能有函数体，抽象类不能被实例化，只能由其子类实现抽象函数，如果某个抽象类的子类仍是抽象类，那么该子类不需要实现其父类的抽象函数。
　　2：C++中的有虚函数的概念，用virtual 关键字来表示，每个类都会有一个虚函数表，该虚函数表首先会从父类中继承得到父类的虚函数表， 如果子类中重写了父类的虚函数（不管重写后的函数是否为虚函数），要调用哪个虚函数，是根据当前实际的对象来判断的（不管指针所属类型是否为当前类，有可 能是父类型），指针当前指向的是哪种类型的对象，就调用哪个类型中类定义的虚函数。每个类只有一张虚拟函数表，所有的对象共用这张表。
　　C++的函数多态就是通过虚函数来实现的。
　　3：C++中，如果函数不是虚函数，则调用某个函数，是根据当前指针类型来判断的，并不是根据指针所指向对象的类型。
　　4：Java中，如果函数不是抽象函数，而是一个普通函数，它是默认实现类似C++中虚函数功能的，也就是说，调用某个函数，是根据当前指针所指向对象的类型来判断的，而不是根据指针类型判断。正好与C++中的普通函数相反。即：JAVA里自动实现了虚函数。
　　C++ Java
　　虚函数 -------- 普通函数
　　纯虚函数 -------- 抽象函数
　　抽象类 -------- 抽象类
　　虚基类 -------- 接口
　　纯虚函数： 主要特征是不能被用来声明对象,是抽象类,是用来确保程序结构与应用域的结构据具有直接映射关系的设计工具。带有纯虚函数的类称为抽象类，抽象类能被子类 继承使用，在子类中必须给出纯虚函数的实现，如果子类未给出该纯虚函数的实现，那么该子类也是抽象类，只有在子类不存在纯虚函数时，子类才可以用来声明对 象！抽象类也能用于声明指针或引用，或用于函数声明中。具有抽象类特性的类还有构造函数和析构函数，全部是保护的类。如果没有给出纯虚函数的实现，则在它 所在的类的构造函数或析构函数中不能直接或间接的调用它。纯虚函数的实现可以在类声明外进行定义。
　　5. C++中一般都是把析构函数声明为虚函数。因为虚函数可以实现动态绑定，也就是到底调用哪个函数是根据指针当前指向哪个对象来确定的，不是根据指针的类型来确定。如果C++中不把析构函数声明为虚函数，那么其有个子类，重写了虚函数，那么当父类指针指向一个子类对象时，当调用析构函数时，只调用父类的析构函数，而无法调用子类的析构函数，所以一般情况是把析构函数声明为虚函数，实现动态绑定。当然如果一个类不包含虚函数，这经常预示不打算将它作为基类使用。当一个类不打算作为基类时，将析构函数声明为虚拟通常是个坏主意。
　　标准 string 类型不包含虚函数，如果把String作为基类继承得到子类会出问题。
　　总之：多态基类应该声明虚析构函数。如果一个类有任何虚函数，它就应该有一个虚析构函数；如果不是设计用于做基类或不是设计用于多态，这样的类就不应该声明虚析构函数。
　　关于接口与抽象类：
　　c++中没有接口的概念，与之对应的是纯虚类，即只含有纯虚函数的类，c++抽象类的概念是含有纯虚函数成员的类。这是因为c++提供多继承，而像java、c#这些只提供单继承（避免多继承的复杂性和低效性）的语言为了模拟多继承功能就提供了接口概念，接口可以继承多个。
　　abstract class是抽象类，至少包含一个纯虚函数的类就叫做抽象类。
　　但是如果一个类，所有的成员都是纯虚函数，那么它和一般的抽象类在用法上是有区别的。至少microsoft给的com接口定义全部都是仅由纯虚函数构成的类。因此把这样的类定义叫做纯虚类也不算错。
　　纯虚函数和虚函数的区别在于前者不包含定义，而后者包含函数体。
　　那么纯虚类就是不包含任何实现（包括成员函数定义和成员变量定义。前者代表算法，后者代表结构）。不包含任何算法和结构的类叫做纯虚类，应该没有问题。
　　在java里面的确没有纯虚类的概念，因为java里没有纯虚函数这个概念。java管虚函数叫做abstract function，管抽象类叫做abstract class，直接说来，java根本没有virtual这个关键字，都用abstract代替，因此java里面根本就没有pure这个概念。有那就是interface。在interface里面定义的函数都不能有函数体，这个在java里面叫做接口。那么c++里面与interface等同的概念就是纯虚类了，c++用纯虚类来模拟interface这个抽象概念，因此这里说的“纯虚类”与java的abstract class不同，与c++的一般抽象类也不同。“纯虚类”与c++一般抽象类的区别就好比java里面interface 和 abstract class的区别。
　　抽象类只能作为基类来使用，其纯虚函数的实现由派生类给出。如果派生类中没有重新定义纯虚函数，而只是继承基类的纯虚函数，则这个派生类仍然还是一个抽象类。如果派生类中给出了基类纯虚函数的实现，则该派生类就不再是抽象类了，它是一个可以建立对象的具体的类。
　　抽象类是不能定义对象的。




c++中虚函数和纯虚函数定义
只有用virtual声明类的成员函数，使之成为虚函数，不能将类外的普通函数声明为虚函数。因为虚函数的作用是允许在派生类中对基类的虚函数重新定义。所以虚函数只能用于类的继承层次结构中。

     一个成员函数被声明为虚函数后，在同一类族中的类就不能再定义一个非virtual的但与该虚函数具有相同的参数（包括个数和类型）和函数返回值类型的同名函数。

       根据什么考虑是否把一个成员函数声明为虚函数？

       ①  看成员函数所在的类是否会作为基类

       ② 看成员函数在类的继承后有无可能被更改功能，如果希望更改其功能的，一般应该将它声明为虚函数。

       如果成员函数在类被继承后功能不需修改，或派生类用不到该函数，则不要把它声明为虚函数。不要仅仅考虑到作为基类而把类中的所有成员函数都声明为虚函数。

      应考虑对成员函数的调用是通过对象名还是通过基类指针或引用去访问，如果是通过基类指针或引用去访问的，则应当声明为虚函数。有时在定义虚函数时，并不定义其函数体，即纯虚函数。它的作用只是定义了一个虚函数名,具体功能留给派生类去添加。

      说明：使用虚函数，系统要有一定的空间开销。当一个类带有虚函数时，编译系统会为该类构造一个虚函数表（vtbl），它是一个指针数组，存放每个虚函数的入口地址。系统在进行动态关联的时间开销很少，提高了多态性的效率。

一、虚析构函数

      析构函数的作用是在对象撤销之前把类的对象从内存中撤销。通常系统只会执行基类的析构函数，不执行派生类的析构函数。

      只需要把基类的析构函数声明为虚函数，即虚析构函数，这样当撤销基类对象的同时也撤销派生类的对象，这个过程是动态关联完成的。

      如果将基类的析构函数声明为虚函数时，由该基类所派生的所有派生类的析构函数都自动成为虚函数，即使派生类的析构函数与基类的析构函数名字不相同。

       最好把基类的析构函数声明为虚函数，这将使所有派生类的析构函数自动成为虚函数，如果程序中显式delete运算符删除一个对象，而操作对象用了指向派生类对象的基类指针，系统会调用相应类的析构函数。

     构造函数不能声明为虚函数。

 

二、纯虚函数

        有时候，基类中的虚函数是为了派生类中的使用而声明定义的，其在基类中没有任何意义。此类函数我们叫做纯虚函数，不需要写成空函数的形式，只需要声明成：

      virtual 函数类型 函数名（形参表列）=0;

       注意：纯虚函数没有函数体；

      最后面的“=0“并不代表函数返回值为0，只是形式上的作用，告诉编译系统”这是纯虚函数”；

      这是一个声明语句，最后应有分号。

     纯虚函数只有函数的名字但不具备函数的功能，不能被调用。在派生类中对此函数提供定义后，才能具备函数的功能，可以被调用。
